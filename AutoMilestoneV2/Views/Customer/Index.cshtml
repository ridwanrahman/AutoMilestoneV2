@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Styles.Render("~/Content/CustomerStyleSheet.css")
<!--<script src='https://api.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.js'></script>-->
<!--<link href='https://api.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.css' rel='stylesheet' />-->


<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.0/mapbox-gl.js'></script>
<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.0/mapbox-gl.css' rel='stylesheet' />
<style>
    body {
        margin: 0;
        padding: 0;
    }

    #map {
        position: relative;
        width: 100%;
    }

    .distance-container {
        position: absolute;
        top: 10px;
        left: 10px;
        z-index: 1;
    }
    
    .distance-container > * {
        background-color: rgba(0, 0, 0, 0.5);
        color: #fff;
        font-size: 11px;
        line-height: 18px;
        display: block;
        margin: 0;
        padding: 5px 10px;
        border-radius: 3px;
    }
    .loader {
        display: none;
        border: 16px solid #f3f3f3;
        border-radius: 50%;
        border-top: 16px solid #3498db;
        width: 120px;
        height: 120px;
        -webkit-animation: spin 2s linear infinite; /* Safari */
        animation: spin 2s linear infinite;
    }
    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% { transform: rotate(360deg); }
    }
</style>

<div class="container-fluid">
    <br />
    <br />
    <br />
    <div class="jumbotron">
        <h1>AutoMilestone</h1>
        <p class="lead">Select from our wide range of cars</p>
        <p><a href="https://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
    </div>

    <div>
        Available cars
        <div class="list-group">
            @foreach (var data in ViewBag.ItemData)

            {
                <a href="#" id="car_selection" value="@data.Id" class="list-group-item car_selection">@data.Name, @data.vehicle_description</a>
            }
        </div>
        <label for="from">From</label>
        <input type="text" id="date_from" name="from" />
        <label for="to">to</label>
        <input type="text" id="date_to" name="to" />
        <div class="loader"></div>
        FROM LOCATION:

        <div id='map' style='width: 700px; height: 500px;'></div>
        <div id='distance'></div>
        <div id='info'></div>

        <button id="show_data">show data</button>

        <p><a href="#" class="btn btn-primary btn-lg" id="modalbutton">Done</a></p>
    </div>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script src='https://api.mapbox.com/mapbox.js/plugins/turf/v2.0.2/turf.min.js'></script>

    <script>

        $(document).ready(function () {
            $("#modalbutton").click(function () {
                $("#modal").toggle('show');
            })
            var car_id = 0;
            var date_from = "";
            var date_to = "";
            var locations = [];
            var point = {
                "type": "Feature",
                "geometry": {
                    "type": "Point",
                    "coordinates": []
                },
                "properties": {
                    "id": null
                }
            };
            var response = [];
            $(".loader").css({ 'display': 'hide' });

            mapboxgl.accessToken = 'pk.eyJ1Ijoicmlkd2FucmFobWFuIiwiYSI6ImNrMTJjYXd5MjAwbzgzZGxscGM3c3l5dnYifQ.Dus70kgKra8qK4EbZFUR3Q';
            var map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: [144.95, -37.82], // starting position
                zoom: 11.5 // starting zoom
            });
            // Add zoom and rotation controls to the map.
            map.addControl(new mapboxgl.NavigationControl());

            var distanceContainer = document.getElementById('distance');
            // GeoJSON object to hold our measurement features
            var geojson = {
                "type": "FeatureCollection",
                "features": []
            };

            // Used to draw a line between points
            var linestring = {
                "type": "Feature",
                "geometry": {
                    "type": "LineString",
                    "coordinates": []
                }
            };

            map.on('load', function () {
                map.addSource('geojson', {
                    "type": "geojson",
                    "data": geojson
                });
                // Add styles to the map
                map.addLayer({
                    id: 'measure-points',
                    type: 'circle',
                    source: 'geojson',
                    paint: {
                        'circle-radius': 5,
                        'circle-color': '#000'
                    },
                    filter: ['in', '$type', 'Point']
                });

                map.addLayer({
                    id: 'measure-lines',
                    type: 'line',
                    source: 'geojson',
                    layout: {
                        'line-cap': 'round',
                        'line-join': 'round'
                    },
                    paint: {
                        'line-color': '#000',
                        'line-width': 2.5
                    },
                    filter: ['in', '$type', 'LineString']
                });


                map.on('click', function (e) {
                    var features = map.queryRenderedFeatures(e.point, { layers: ['measure-points'] });
                    console.log("herere");
                    // Remove the linestring from the group
                    // So we can redraw it based on the points collection
                    if (geojson.features.length > 1) geojson.features.pop();
                    // If a feature was clicked, remove it from the map
                    if (features.length) {
                        var id = features[0].properties.id;
                        geojson.features = geojson.features.filter(function (point) {
                            return point.properties.id !== id;
                        });
                    } else {
                        point = {
                            "type": "Feature",
                            "geometry": {
                                "type": "Point",
                                "coordinates": [
                                    e.lngLat.lng,
                                    e.lngLat.lat
                                ]
                            },
                            "properties": {
                                "id": String(new Date().getTime())
                            }
                        };
                        locations.push(point['geometry']['coordinates']);
                        console.log(locations);
                        geojson.features.push(point);
                    }
                    if (geojson.features.length > 1) {

                        linestring.geometry.coordinates = geojson.features.map(function (point) {
                            return point.geometry.coordinates;
                        });
                        geojson.features.push(linestring);
                        // Populate the distanceContainer with total distance
                        var value = document.createElement('pre');
                        value.textContent = 'Total distance: ' + turf.lineDistance(linestring).toLocaleString() + 'km';
                        $("#distance").html(value.textContent);
                    }
                    map.getSource('geojson').setData(geojson);
                });
            });

            map.on('mousemove', function (e) {
                var features = map.queryRenderedFeatures(e.point, { layers: ['measure-points'] });
                // UI indicator for clicking/hovering a point on the map
                map.getCanvas().style.cursor = (features.length) ? 'pointer' : 'crosshair';
            });
            map.on('mousemove', function (e) {
                document.getElementById('info').innerHTML =
                    // e.point is the x, y coordinates of the mousemove event relative
                    // to the top-left corner of the map
                    JSON.stringify(e.point) + '<br />' +
                    // e.lngLat is the longitude, latitude geographical position of the event
                    JSON.stringify(e.lngLat.wrap());
            });

            $.fn.myFunction = function () {
                console.log("booking constraint checker called");
                console.log(date_from.length);
                console.log(date_to.length);
                var target = $(".loader");
                if (date_from.length > 0 && date_to.length > 0 && car_id > 0) {
                    var dates = car_id + "," + date_from + "," + date_to;
                    $(".loader").css({ "display": "block" });
                    console.log("have both dates");
                    $.ajax({
                        type: "POST",
                        dataType: 'text',
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ inputDates: JSON.stringify(dates) }),
                        url: "/Customer/CheckBookingDate",
                        success: function (result) {
                            target.css({"display":"hide"})
                            if (result == "\"already booked\"") {
                                alert("this car is already booked in the given date");
                            } else {
                                $(".loader").css({ "display": "hide" });
                                alert("booking will be created");
                            }
                        }
                    })
                } else {
                    console.log("incomplete");
                }
            }
            $(".car_selection").click(function () {
                car_id = $(this).attr("value");
                alert("You have selected car with id " + car_id);
            });
            $("#date_from").datepicker({ format: 'mm/dd/yyyy', startDate: '0d' });
            $("#date_from").change(function () {
                date_from = $(this).val();
                $.fn.myFunction();
            });
            $('#date_to').datepicker({ format: 'mm/dd/yyyy', startDate: '0d' });
            $("#date_to").change(function () {
                date_to = $(this).val();
                $.fn.myFunction();
            });

            $("#show_data").click(function () {
                response.push(date_from);
                response.push(date_to);
                response.push(car_id);
                response.push(locations);
                $.ajax({
                    type: "POST",
                    dataType: 'text',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ sendInfo: JSON.stringify(response) }),
                    url: "/Customer/CreateBooking",
                    success: function (result) {
                        if (result == "\"success\"") {
                            console.log("received");
                        }
                        else {
                            console.log("need more work");
                        }
                    }
                })
            })
        })
    </script>
</div>